# ─────────────────────────────────────────────────────────────
# File: main.py
# Purpose: FastAPI entrypoint with robust logging, healthcheck,
#          and env-driven configuration. Keeps existing structure
#          but hardens error handling for production (systemd).
# ─────────────────────────────────────────────────────────────

import os
import logging
import sys
from datetime import datetime
from typing import Optional

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse

# Router
# Import router with robust package resolution (supports both app/ and project-root layouts)
try:
    # Case A: project root has package "app" and we run `uvicorn app.main:app`
    from app.routes.predict import router as predict_router  # type: ignore
except Exception:
    try:
        # Case B: main.py and routes/ are at the same level; run `uvicorn main:app`
        from routes.predict import router as predict_router  # type: ignore
    except Exception as e:
        logging.basicConfig(level=logging.INFO, stream=sys.stdout,
                            format="%(asctime)s %(levelname)s %(name)s - %(message)s")
        logging.getLogger(__name__).exception("Failed to import router (app.routes.predict/routes.predict): %s", e)
        raise

# ----- Logging setup ---------------------------------------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    stream=sys.stdout,
    format="%(asctime)s %(levelname)s %(name)s [%(filename)s:%(lineno)d] - %(message)s",
)
logger = logging.getLogger("xgbapi")

# ----- Config from environment ----------------------------------------------
API_HOST = os.getenv("API_HOST", "0.0.0.0")
API_PORT = int(os.getenv("API_PORT", "8080"))
MODEL_DIR = os.getenv("MODEL_DIR", "./models")
MODEL_NAME = os.getenv("MODEL_NAME", "")  # optional explicit filename
APP_VERSION = os.getenv("APP_VERSION", datetime.utcnow().strftime("%Y.%m.%d"))

# ----- Middleware: request id + structured access log -----------------------
class RequestIdMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        rid = request.headers.get("X-Request-ID") or datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
        request.state.request_id = rid
        try:
            response = await call_next(request)
        except Exception:
            logger.exception("Unhandled error (rid=%s) path=%s", rid, request.url.path)
            return JSONResponse(status_code=500, content={
                "ok": False,
                "error": "internal_server_error",
                "request_id": rid,
            })
        response.headers["X-Request-ID"] = rid
        return response

app = FastAPI(title="XGBoost Predict API", version=APP_VERSION)

# CORS (adjust origins as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)
app.add_middleware(RequestIdMiddleware)

# Mount router(s)
app.include_router(predict_router, prefix="/api")

@app.on_event("startup")
async def on_startup():
    logger.info("[CONFIG] API_HOST           = %s", API_HOST)
    logger.info("[CONFIG] API_PORT           = %s", API_PORT)
    logger.info("[CONFIG] MODEL_DIR          = %s", MODEL_DIR)
    if MODEL_NAME:
        logger.info("[CONFIG] MODEL_NAME         = %s", MODEL_NAME)
    logger.info("[CONFIG] LOG_LEVEL          = %s", LOG_LEVEL)
    logger.info("[CONFIG] APP_VERSION        = %s", APP_VERSION)

@app.get("/healthz")
async def healthz():
    # Lightweight health; deeper check is /api/health
    return {"ok": True, "version": APP_VERSION, "model_dir": MODEL_DIR}

# Optional: deep health endpoint provided by predict router (/api/health)

if __name__ == "__main__":
    # When starting via `python main.py` (dev). In production, systemd runs uvicorn.
    import uvicorn
    uvicorn.run("main:app", host=API_HOST, port=API_PORT, reload=os.getenv("RELOAD", "0") == "1")
    